---
import BaseLayout from "@layouts/BaseLayout.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import formatDate from "@utils/formatDate";
import createDateTimeAttr from "@utils/createDateTimeAttr";
import TagList from "@components/blog/TagList.astro";

export async function getStaticPaths() {
	const entries = await getCollection("blog");

	return entries.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

interface Props {
	entry: CollectionEntry<"blog">;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const dateOptions: object = {
	year: "2-digit",
	month: "numeric",
	day: "numeric",
};

const formattedPublishDate = formatDate(entry.data.publishDate, dateOptions);
const publishDateDateTime = createDateTimeAttr(entry.data.publishDate);
const formattedModifiedDate = formatDate(entry.data.modifiedDate, dateOptions);
const modifiedDateDateTime = createDateTimeAttr(entry.data.modifiedDate);
---

<BaseLayout description={entry.data.description} title={entry.data.title}>
	<div class="singleBlogMeta no-margin-last-element w-100">
		<h1>{entry.data.title}</h1>

		<p class="postDate">
			<strong>Posted on: </strong>
			<time datetime={publishDateDateTime}>{formattedPublishDate}</time>

			{
				entry.data.modifiedDate && (
					<>
						<strong>Last Updated on: </strong>
						<time datetime={modifiedDateDateTime}>{formattedModifiedDate}</time>
					</>
				)
			}
		</p>

		{entry.data.tags && <TagList centered tags={entry.data.tags} />}
	</div>

	<div class="singleBlogContent no-margin-last-element">
		<Content />
	</div>

	<p class="backToBlog"><a href="/blog/">Back to Blog</a></p>
</BaseLayout>

<style>
	h1 {
		text-align: center;
		text-transform: uppercase;
		line-height: 1;
		margin-bottom: 3rem;
	}

	.backToBlog {
		color: var(--color-body);
		margin-bottom: 0;
		text-align: center;
		width: 100%;
	}

	.postDate {
		margin-bottom: 1.5rem;
		text-align: center;
	}
</style>

<style is:global>
	pre.astro-code {
		margin-top: 2rem;
		margin-bottom: 2rem;
		padding: 1rem;
		tab-size: 2;
	}

	:not(pre) > code {
		background-color: var(--color-blue);
		color: white;
		font-family: monospace, var(--font-special);
		font-size: 0.875rem;
		padding: 0.125rem 0.25rem;
		user-select: all;
	}

	.footnotes {
		margin-top: 2rem;
	}

	.footnotes > :last-child {
		margin-bottom: 0;
	}

	.footnotes li:last-child > :last-child {
		margin-bottom: 0;
	}

	.footnotes .data-footnote-backref {
		text-decoration: none;
	}

	.singleBlogContent {
		margin-bottom: var(--margin-lots);
		margin-top: var(--margin-lots);
	}

	.singleBlogContent h2 {
		font-weight: var(--fw-bold);
		margin-bottom: 1rem;
	}

	.singleBlogContent span[title] {
		text-decoration-line: underline;
		text-decoration-style: dotted;
		text-decoration-thickness: var(--line-thickness);
		text-underline-position: under;
	}

	.singleBlogContent span[title]:hover {
		cursor: help;
	}
</style>
