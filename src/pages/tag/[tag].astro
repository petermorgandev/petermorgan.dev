---
import BaseLayout from "@layouts/BaseLayout.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection, getEntry } from "astro:content";
import PostList from "@components/blog/PostList.astro";

export async function getStaticPaths() {
	const getPosts = await getCollection("blog");
	const sortedPosts = getPosts.sort((a, b) => {
		return new Date(b.data.publishDate).valueOf() - new Date(a.data.publishDate).valueOf();
	});

	const tagSet = new Set<string>();

	sortedPosts.forEach((post) => {
		if (post.data.tags) {
			post.data.tags.map((category: string) => {
				tagSet.add(category);
			});
		}
	});

	const tagArray = [...tagSet];

	return tagArray.map((tag) => {
		const posts = sortedPosts.filter((post) => {
			if (post.data.tags) {
				return post.data.tags.includes(tag);
			}
		});

		return {
			params: { tag },
			props: {
				posts,
				tag,
			},
		};
	});
}

interface Props {
	posts: CollectionEntry<"blog">[];
	tag: string;
}

const { posts, tag } = Astro.props;

const title = `Tag: ${tag}`;

const getTagDescription = await getEntry("tags", tag);
const tagDescription = getTagDescription?.data?.description ?? `A collection of ${tag}-related blog posts.`;
---

<BaseLayout title={title} description={tagDescription}>
	<div class="no-margin-last-element blog-post-header">
		<h1>{title}</h1>

		<h2 class="fontsize-h3">{tagDescription}</h2>
	</div>

	{posts.map((post) => <PostList description={post.data.description} publishDate={post.data.publishDate} slug={post.slug} tags={post.data.tags} title={post.data.title} />)}
</BaseLayout>

<style>
	.blog-post-header {
		align-items: center;
		display: flex;
		flex-direction: column;
		margin-bottom: var(--margin-lots);
		text-align: center;
		width: 100%;
	}

	h1 {
		text-align: center;
		text-transform: uppercase;
		margin-bottom: 3rem;
	}

	@media screen and (min-width: 768px) {
		h1 {
			box-shadow: inset 0 -0.5em 0 #868b9f;
			line-height: 1;
			padding-right: 1rem;
			padding-left: 1rem;
			width: max-content;
		}
	}
</style>
